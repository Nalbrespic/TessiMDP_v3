var BrowserPrint = function() {

    function wrap(type) {
        return wsWidget + type;
    }

    function xhr(method, url) {
        /** @type {XMLHttpRequest} */
        var xhr = new XMLHttpRequest;
        return "withCredentials" in xhr ? xhr.open(method, url, true) : "undefined" != typeof XDomainRequest ? (xhr = new XDomainRequest, xhr.open(method, url)) : xhr = null, xhr;
    }

    function callback(args, xhr, success, callback) {
        return void 0 != args && (void 0 == success && (success = args.sendFinishedCallback), void 0 == callback && (callback = args.sendErrorCallback)), xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE && 200 === xhr.status) {
                success(xhr.responseText);
            } else {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    callback(xhr.responseText);
                }
            }
        }, xhr;
    }
    var THREE = {};
    /** @type {number} */
    var vn = 2;
    /** @type {string} */
    var wsWidget = "http://localhost:9100/";
    return "https:" === location.protocol && (wsWidget = "https://localhost:9101/"), THREE.Device = function(options) {
        var typePattern = this;
        this.name = options.name;
        this.deviceType = options.deviceType;
        this.connection = options.connection;
        this.uid = options.uid;
        /** @type {number} */
        this.version = vn;
        this.provider = options.provider;
        this.manufacturer = options.manufacturer;
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        this.sendErrorCallback = function(dataAndEvents) {
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        this.sendFinishedCallback = function(dataAndEvents) {
        };
        /**
         * @param {string} payload
         * @param {string} success
         * @param {number} results
         * @return {undefined}
         */
        this.send = function(payload, success, results) {
            var result = xhr("POST", wrap("write"));
            if (result) {
                callback(typePattern, result, success, results);
                var msg = {
                    device : {
                        name : this.name,
                        uid : this.uid,
                        connection : this.connection,
                        deviceType : this.deviceType,
                        version : this.version,
                        provider : this.provider,
                        manufacturer : this.manufacturer
                    },
                    data : payload
                };
                result.send(JSON.stringify(msg));
            }
        };
        /**
         * @param {string} requestUrl
         * @param {string} success
         * @param {number} url
         * @return {undefined}
         */
        this.sendUrl = function(requestUrl, success, url) {
            var request = xhr("POST", wrap("write"));
            if (request) {
                callback(typePattern, request, success, url);
                var params = {
                    device : {
                        name : this.name,
                        uid : this.uid,
                        connection : this.connection,
                        deviceType : this.deviceType,
                        version : this.version,
                        provider : this.provider,
                        manufacturer : this.manufacturer
                    },
                    url : requestUrl
                };
                request.send(JSON.stringify(params));
            }
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        this.readErrorCallback = function(dataAndEvents) {
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        this.readFinishedCallback = function(dataAndEvents) {
        };
        /**
         * @param {Function} success
         * @param {number} a
         * @return {undefined}
         */
        this.read = function(success, a) {
            var request = xhr("POST", wrap("read"));
            if (request) {
                callback(typePattern, request, success, a);
                var params = {
                    device : {
                        name : this.name,
                        uid : this.uid,
                        connection : this.connection,
                        deviceType : this.deviceType,
                        version : this.version,
                        provider : this.provider,
                        manufacturer : this.manufacturer
                    }
                };
                request.send(JSON.stringify(params));
            }
        };
        /**
         * @param {string} body
         * @param {Function} request
         * @param {number} callback
         * @return {undefined}
         */
        this.sendThenRead = function(body, request, callback) {
            this.send(body, function(parser) {
                return function() {
                    parser.read(request, callback);
                };
            }(this), callback);
        };
    },
        THREE.getLocalDevices = function(onSuccess, results, name) {
        var request = xhr("GET", wrap("available"));
        if (request) {
            /**
             * @param {?} res
             * @return {?}
             */
            finishedFunction = function(res) {
                response = res;
                /** @type {*} */
                response = JSON.parse(response);
                var i;
                for (i in response) {
                    if (response.hasOwnProperty(i) && response[i].constructor === Array) {
                        arr = response[i];
                        /** @type {number} */
                        var j = 0;
                        for (;j < arr.length;++j) {
                            arr[j] = new THREE.Device(arr[j]);
                        }
                    }
                }
                return void 0 == name ? void onSuccess(response) : void onSuccess(response[name]);
            };
            callback(void 0, request, finishedFunction, results);
            request.send();
        }
    },

        THREE.getDefaultDevice = function(version, on, results) {
        /** @type {string} */
        var name = "default";
        if (void 0 != version) {
            if (null != version) {
                /** @type {string} */
                name = name + "?type=" + version;
            }
        }
        var request = xhr("GET", wrap(name));
        if (request) {
            /**
             * @param {?} res
             * @return {?}
             */
            finishedFunction = function(res) {
                if (response = res, "" == response) {
                    return void on(null);
                }
                /** @type {*} */
                response = JSON.parse(response);
                var failuresLink = new THREE.Device(response);
                on(failuresLink);
            };
            callback(void 0, request, finishedFunction, results);
            request.send();
        }
    }, THREE.readOnInterval = function(deepDataAndEvents, cb, threshold) {
        if (!(void 0 != threshold && 0 != threshold)) {
            /** @type {number} */
            threshold = 1;
        }
        /**
         * @return {undefined}
         */
        readFunc = function() {
            deepDataAndEvents.read(function(outErr) {
                cb(outErr);
                setTimeout(readFunc, threshold);
            }, function(dataAndEvents) {
                setTimeout(readFunc, threshold);
            });
        };
        setTimeout(readFunc, threshold);
    }, THREE.bindFieldToReadData = function(deepDataAndEvents, elem, threshold, $sanitize) {
        THREE.readOnInterval(deepDataAndEvents, function(val) {
            if ("" != val) {
                /** @type {string} */
                elem.value = val;
                if (void 0 != $sanitize) {
                    if (null != $sanitize) {
                        $sanitize();
                    }
                }
            }
        }, threshold);
    }, THREE;
}();